@using Newtonsoft.Json;
@using JobJournal.Data.Enums
@using JobJournal.Models
@using System.Web;
@model IEnumerable<JobInfo>

@{
    ViewData["Title"] = "Job Infos";
}

<form asp-controller="JobInfos" asp-action="Index" method="get">
    <div class="row mb-3 align-items-center">
        <div class="col-md-4">
            <input type="text" name="searchTerm" class="form-control" placeholder="Search Company or Role..." value="@ViewData["CurrentFilter"]" />
        </div>

        <div class="col-md-3">
            <select name="statusFilter" class="form-control form-select">
                <option value="">All Status</option>
                @foreach (var status in Enum.GetValues(typeof(ApplicationStatus)))
                {
                    var enumStatus = (ApplicationStatus)status;
                    @if (ViewData["CurrentStatusFilter"] != null && ViewData["CurrentStatusFilter"].ToString() == enumStatus.ToString())
                    {
                        <option value="@enumStatus" selected>@enumStatus.ToString()</option>
                    }
                    else
                    {
                        <option value="@enumStatus">@enumStatus.ToString()</option>
                    }
                }
            </select>
        </div>

        <div class="col-md-3">
            <button type="submit" class="btn btn-primary">Search</button>
            <a asp-action="Index" class="btn btn-outline-secondary">Clear</a>
        </div>


        <div class="col-md-2 text-end">
            <a asp-controller="JobInfos" asp-action="Create" class="btn btn-outline-success"> <i class="bi bi-plus-circle"></i> Add New</a>
            <a asp-controller="JobInfos" asp-action="ExportExcel" class="btn btn-sm btn-outline-primary" title="Export to Excel"> <i class="bi bi-download"></i></a>
        </div>
    </div>
</form>

@if (Model.Any())
{
    <div class="table-responsive mb-5">
        <table class="table">
            <thead>
                <tr>
                    <td>Company Name</td>
                    <td>Role</td>
                    <td>Job Summary</td>
                    <td>Status</td>
                    <td>Applied via</td>
                    <td>Applied Time</td>
                    <td>Action</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var job in Model)
                {
                    <tr>
                        <td>@job.companyName</td>
                        <td>@job.role</td>
                        <td>
                            @if (job.jobSummary != null && job.jobSummary.Length > 40)
                            {
                                <span>@job.jobSummary.Substring(0, 40)...</span>
                            }
                            else
                            {
                                <span>@job.jobSummary</span>
                            }

                            @{
                                bool hasLongSummary = (job.jobSummary != null && job.jobSummary.Length > 40);
                                string firstImageData = (job.Images != null && job.Images.Any() && !string.IsNullOrEmpty(job.Images.FirstOrDefault()?.ImageData))
                                ? job.Images.FirstOrDefault().ImageData
                                : "";
                                bool hasImage = !string.IsNullOrEmpty(firstImageData);

                                if (hasLongSummary || hasImage)
                                {
                                    <button type="button"
                                            class="btn btn-link btn-sm p-0 ms-1 show-more-summary"
                                            data-bs-toggle="modal"
                                            data-bs-target="#notesModal"
                                            data-full-summary="@job.jobSummary"
                                            data-all-images-json="@(JsonConvert.SerializeObject((job.Images ?? new List<JobImage>()).Select(i => new { i.ImageData, i.FileName, i.ContentType }).ToList()))"
                                            data-modal-title="Job Application Summary"
                                            data-modal-type="summary" style="vertical-align: baseline;">
                                        Show more
                                    </button>
                                }
                            }
                        </td>
                        <td>
                            <span class="status-@job.applicationStatus.ToString() px-2 py-1 rounded">
                                @job.applicationStatus
                            </span>
                        </td>
                        <td>@job.appliedVia</td>
                        <td>@job.appliedTime.ToString("MMMM d,yyyy")</td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@job.id" class="btn btn-sm btn-outline-primary me-1" title="Edit">
                                <i class="bi bi-pencil"></i>
                            </a>

                            <a asp-action="Delete" asp-route-id="@job.id" class="btn btn-sm btn-outline-danger me-1" title="Delete">
                                <i class="bi bi-trash"></i>
                            </a>

                            <button type="button"
                                    class="btn btn-sm btn-outline-info note-trigger"
                                    title="View Notes"
                                    data-bs-toggle="modal"
                                    data-bs-target="#notesModal"
                                    data-note-content="@job.notes"
                                    data-modal-title="Job Application Notes"
                                    data-modal-type="notes">
                                <i class="bi bi-chat-text chat-icon-xs"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    string currentSearchTerm = ViewData["CurrentFilter"] as string;
    string currentStatusFilter = ViewData["CurrentStatusFilter"] as string;

    bool hasSearchTerm = !string.IsNullOrEmpty(currentSearchTerm);
    bool hasStatusFilter = !string.IsNullOrEmpty(currentStatusFilter);

    bool hasSearchOrFilter = hasSearchTerm || hasStatusFilter;

    @if (hasSearchOrFilter)
    {
        <div class="text-center py-5 my-5">
            <h2 class="display-6 text-muted mb-4">
                <i class="bi bi-search" style="font-size: 3rem;"></i><br />
                No Results Found
            </h2>
            <p class="lead text-muted mb-4">
                @{
                    string messagePrefix = "Your search";
                    string searchPart = "";
                    string statusPart = "";

                    if (hasSearchTerm)
                    {
                        searchPart = $"for \"<strong>{currentSearchTerm}</strong>\"";
                    }

                    if (hasStatusFilter)
                    {
                        statusPart = $"with status \"<strong>{currentStatusFilter}</strong>\"";
                    }
                    else if (hasSearchTerm && !hasStatusFilter)
                    {
                        statusPart = "for all statuses";
                    }

                    string fullMessage = messagePrefix;
                    if (!string.IsNullOrEmpty(searchPart))
                    {
                        fullMessage += " " + searchPart;
                    }
                    if (!string.IsNullOrEmpty(statusPart))
                    {
                        if (hasSearchTerm && hasStatusFilter)
                        {
                            fullMessage += " and " + statusPart.TrimStart();
                        }
                        else
                        {
                            fullMessage += " " + statusPart;
                        }
                    }

                    fullMessage += " did not match any job applications.";
                }
                @Html.Raw(fullMessage)
            </p>
            <a asp-action="Index" class="btn btn-lg btn-outline-secondary">
                <i class="bi bi-x-circle me-2"></i> Clear Search and Filters
            </a>
        </div>
    }
    else
    {
        <div class="text-center py-5 my-5">
            <h2 class="display-6 text-muted mb-4">
                <i class="bi bi-lightbulb" style="font-size: 3rem;"></i><br />
                Ready to Track Your Job Search?
            </h2>
            <p class="lead text-muted mb-4">
                This is where you'll see all your job applications.<br />
                No entries yet? Let's add your first one and start monitoring your progress!
            </p>
            <a asp-controller="JobInfos" asp-action="Create" class="btn btn-lg btn-success">
                <i class="bi bi-plus-circle me-2"></i> Add Your First Application
            </a>
        </div>
    }
}

@* Modals for notes and toast messages *@
@if (TempData["JobCreatedMessage"] != null || TempData["JobEditedMessage"] != null || TempData["JobDeletedMessage"] != null)
{
    <div aria-live="polite" aria-atomic="true" class="position-relative">
        <div class="toast-container position-fixed bottom-0 end-0 p-3">

            @if (TempData["JobCreatedMessage"] != null)
            {
                <div class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
                    <div class="d-flex">
                        <div class="toast-body">
                            @TempData["JobCreatedMessage"]
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            }

            @if (TempData["JobEditedMessage"] != null)
            {
                <div class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
                    <div class="d-flex">
                        <div class="toast-body">
                            @TempData["JobEditedMessage"]
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            }

            @if (TempData["JobDeletedMessage"] != null)
            {
                <div class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
                    <div class="d-flex">
                        <div class="toast-body">
                            @TempData["JobDeletedMessage"]
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            }
        </div>
    </div>
}

@* Notes Modal Structure *@
<div class="modal fade" id="notesModal" tabindex="-1" aria-labelledby="notesModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="notesModalLabel">Job Application Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="modalSummaryContent" class="mb-3"></div>
                <div id="modalNotesContent" class="mb-3"></div>

                <div id="modalImagesGallery" style="display: none;">
                    <h6 class="mb-2">Attached Images</h6>
                    <div class="d-flex flex-wrap gap-2 justify-content-center">
                    </div>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>




@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" xintegrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var toastElList = document.querySelectorAll('.toast');
            var toastList = Array.from(toastElList).map(function (toastEl) {
                return new bootstrap.Toast(toastEl);
            });
            toastList.forEach(toast => toast.show());

            var notesModal = document.getElementById('notesModal');
            notesModal.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget;
                var modalType = button.getAttribute('data-modal-type');
                var desiredTitle = button.getAttribute('data-modal-title') || 'Details';

                var modalTitle = notesModal.querySelector('.modal-title');
                var modalSummaryContent = document.getElementById('modalSummaryContent');
                var modalNotesContent = document.getElementById('modalNotesContent');
                var modalImagesGallery = document.getElementById('modalImagesGallery');
                var modalImagesWrapper = modalImagesGallery.querySelector('.d-flex');

                modalTitle.textContent = desiredTitle;
                modalSummaryContent.textContent = '';
                modalNotesContent.textContent = '';
                modalImagesGallery.style.display = 'none';
                modalImagesWrapper.innerHTML = '';

                if (modalType === 'summary') {
                    var fullSummary = button.getAttribute('data-full-summary');
                    var allImagesJson = button.getAttribute('data-all-images-json');

                    modalSummaryContent.textContent = fullSummary || "No summary available.";

                    if (allImagesJson && allImagesJson !== '') {
                        try {
                            var images = JSON.parse(allImagesJson);

                            if (images.length > 0) {
                                images.forEach(function (img) {
                                    if (img.ImageData && img.ImageData !== '') {
                                        var imgElement = document.createElement('img');
                                        imgElement.src = img.ImageData;
                                        imgElement.alt = img.FileName || 'Attached Image';
                                        imgElement.className = 'img-fluid m-1';
                                        imgElement.style.maxWidth = '150px';
                                        imgElement.style.maxHeight = '100px';
                                        imgElement.style.objectFit = 'contain';

                                        var imageCard = document.createElement('div');
                                        imageCard.className = 'card p-1';
                                        imageCard.style.maxWidth = '160px';
                                        imageCard.style.maxHeight = '110px';
                                        imageCard.style.overflow = 'hidden';
                                        imageCard.style.display = 'flex';
                                        imageCard.style.alignItems = 'center';
                                        imageCard.style.justifyContent = 'center';
                                        imageCard.appendChild(imgElement);

                                        modalImagesWrapper.appendChild(imageCard);
                                    }
                                });
                                modalImagesGallery.style.display = 'block';
                            } else {
                                modalImagesGallery.style.display = 'none';
                            }
                        } catch (e) {
                            console.error("Failed to parse image JSON:", e);
                            modalImagesGallery.style.display = 'none';
                        }
                    } else {
                        modalImagesGallery.style.display = 'none';
                    }

                } else if (modalType === 'notes') {
                    var noteContent = button.getAttribute('data-note-content');
                    modalNotesContent.textContent = noteContent || "No notes available.";
                }
            });
        });
    </script>
}