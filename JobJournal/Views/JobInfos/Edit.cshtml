@using JobJournal.Data.Enums
@model JobInfo

@{
    ViewData["Title"] = "Edit Job Application";
}

<h2>Edit Job Application</h2>

<div class="row">
    <div class="col-md">
        <form asp-action="Edit" method="post">
            <input type="hidden" asp-for="id" />
            <input type="hidden" asp-for="userId" />

            <div class="form-group mb-2">
                <label asp-for="companyName">Company Name <span class="required-star">*</span></label>
                <input asp-for="companyName" class="form-control" />
                <span asp-validation-for="companyName" class="text-danger"></span>
            </div>

            <div class="form-group mb-2">
                <label asp-for="role">Role <span class="required-star">*</span></label>
                <input asp-for="role" class="form-control" />
                <span asp-validation-for="role" class="text-danger"></span>
            </div>

            <div class="form-group mb-2">
                <label asp-for="jobSummary">Job Summary <span class="required-star">*</span></label>
                <textarea asp-for="jobSummary" class="form-control"></textarea>
                <span asp-validation-for="jobSummary" class="text-danger"></span>
            </div>

            <div class="form-group mb-2">
                <label asp-for="applicationStatus">Status <span class="required-star">*</span></label>
                <select asp-for="applicationStatus" asp-items="Html.GetEnumSelectList<ApplicationStatus>()" class="form-control form-select"></select>
                <span asp-validation-for="applicationStatus" class="text-danger"></span>
            </div>

            <div class="form-group mb-2">
                <label asp-for="appliedVia">Applied Via <span class="required-star">*</span></label>
                <select asp-for="appliedVia" asp-items="Html.GetEnumSelectList<AppliedVia>()" class="form-control form-select"></select>
                <span asp-validation-for="appliedVia" class="text-danger"></span>
            </div>

            <div class="form-group col-md-3 mb-2">
                <label>Update Time <span class="required-star">*</span></label>
                <input asp-for="appliedTime" type="date" class="form-control" />
                <span asp-validation-for="appliedTime" class="text-danger"></span>
            </div>

            <div class="form-group mb-2">
                <label asp-for="notes">Notes</label>
                <textarea asp-for="notes" class="form-control"></textarea>
                <span asp-validation-for="notes" class="text-danger"></span>
            </div>

            <div class="form-group mb-2">
                <label>Attached Image (Optional)</label>

                <div class="d-flex align-items-center mb-2">
                    <div class="card image-paste-area"
                         style="width: 150px; height: 100px; 
                    border: 2px dashed #ccc;
                    display: flex; align-items: center; justify-content: center;
                    overflow: hidden;
                    position: relative; cursor: pointer;">
                        @if (!string.IsNullOrEmpty(Model.image))
                        {
                            <img id="imagePreview" src="@Model.image" alt="Current Image"
                                 style="max-width: 100%; max-height: 100%; object-fit: contain;" />
                            <p class="text-muted text-center mb-0 small d-none" id="pasteAreaText">Image</p>
                        }
                        else
                        {
                            <img id="imagePreview" src="" alt="Image Preview"
                                 style="max-width: 100%; max-height: 100%; object-fit: contain; display: none;" />
                            <p class="text-muted text-center mb-0 small" id="pasteAreaText">Image</p>
                        }
                    </div>
                    <button type="button" id="clearImageButton" class="btn btn-sm btn-outline-danger ms-2"
                            style="@(string.IsNullOrEmpty(Model.image) ? "display: none;" : "display: inline-block;")">
                        Clear Image
                    </button>
                </div>

                <input type="hidden" asp-for="image" id="imageHidden" />

                <div class="row g-2 align-items-center">
                    <div class="col-md-4">
                        <input type="url" class="form-control form-control-sm" id="imageUrl" placeholder="Optional: Enter image URL">
                    </div>
                    <div class="col-md-6 d-flex gap-2">
                        <button type="button" class="btn btn-outline-secondary btn-sm" id="uploadImageButton">Upload Image</button>
                        <input type="file" id="imageUpload" accept="image/*" style="display: none;" />
                        <button type="button" class="btn btn-outline-info btn-sm" id="pasteImageButton">Paste Image</button>
                    </div>
                </div>
            </div>

            <div class="my-4 mb-5">
                <button type="submit" class="btn btn-primary btn-md me-2">Save Changes</button>
                <a asp-action="Index" class="btn btn-outline-secondary btn-md">Cancel</a>
            </div>
        </form>
    </div>
</div>



@if (TempData["JobEditFailedMessage"] != null)
{
    <div aria-live="polite" aria-atomic="true" class="position-relative">
        <div class="toast-container position-fixed bottom-0 end-0 p-3">

            @if (TempData["JobEditFailedMessage"] != null)
            {
                <div class="toast align-items-center text-bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
                    <div class="d-flex">
                        <div class="toast-body">
                            @TempData["JobEditFailedMessage"]
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            }

        </div>
    </div>

}



@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const imageUpload = document.getElementById('imageUpload');
            const imageUrl = document.getElementById('imageUrl');
            const pasteImageButton = document.getElementById('pasteImageButton');
            const uploadImageButton = document.getElementById('uploadImageButton');
            const imagePreview = document.getElementById('imagePreview');
            const imageHidden = document.getElementById('imageHidden');
            const clearImageButton = document.getElementById('clearImageButton');

            function displayImage(base64String) {
                if (base64String) {
                    imagePreview.src = base64String;
                    imagePreview.classList.remove('d-none');
                    clearImageButton.classList.remove('d-none');
                    imageHidden.value = base64String;
                } else {
                    imagePreview.src = '';
                    imagePreview.classList.add('d-none');
                    clearImageButton.classList.add('d-none');
                    imageHidden.value = '';
                }
            }

            displayImage(imageHidden.value);

            imageUpload.addEventListener('change', function (event) {
                const file = event.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        displayImage(e.target.result);
                    };
                    reader.readAsDataURL(file);
                    imageUrl.value = '';
                }
            });

            pasteImageButton.addEventListener('click', async function () {
                try {
                    const clipboardItems = await navigator.clipboard.read();
                    for (const clipboardItem of clipboardItems) {
                        for (const type of clipboardItem.types) {
                            if (type.startsWith('image/')) {
                                const blob = await clipboardItem.getType(type);
                                const reader = new FileReader();
                                reader.onload = function (e) {
                                    displayImage(e.target.result);
                                };
                                reader.readAsDataURL(blob);
                                imageUrl.value = '';
                                return;
                            }
                        }
                    }
                    alert('No image found in clipboard.');
                } catch (err) {
                    console.error('Failed to read clipboard contents: ', err);
                    alert('Failed to read clipboard. Please ensure you have granted clipboard permissions.');
                }
            });

            uploadImageButton.addEventListener('click', function () {
                imageUpload.click();
            });

            imageUrl.addEventListener('input', function () {
                if (imageUrl.value.startsWith('data:image/') || imageUrl.value.startsWith('http://') || imageUrl.value.startsWith('https://')) {
                    displayImage(imageUrl.value);
                } else if (imageUrl.value === '') {
                    displayImage('');
                }
            });

            clearImageButton.addEventListener('click', function () {
                displayImage('');
                imageUpload.value = '';
                imageUrl.value = '';
            });
        });
    </script>
}
